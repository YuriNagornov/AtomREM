E0, F0, m, uo, us, s, k, censore_n, censore_t))
write(data, logoutfile, ncolumn=2, sep="\t")
}
write_geneout <- function(outfile, hall) {
data <- c(onco$name[hall$Ha], onco$name[hall$Hi], onco$name[hall$Hd], onco$name[hall$Hb], onco$name[hall$Him])
data <- rbind(data, c(rep("apoptosis", length(onco$name[hall$Ha])),
rep("immortalization", length(onco$name[hall$Hi])),
rep("growth|anti-growth", length(onco$name[hall$Hd])),
rep("angiogenesis", length(onco$name[hall$Hb])),
rep("invasion", length(onco$name[hall$Him]))))
data <- rbind(data, c(hall$Ha_w, hall$Hi_w, hall$Hd_w, hall$Hb_w, hall$Him_w))
data <- rbind(data, c(onco$onsp[hall$Ha], onco$onsp[hall$Hi], onco$onsp[hall$Hd], onco$onsp[hall$Hb], onco$onsp[hall$Him]))
write(data, outfile, ncolumn=4, sep="\t")
}
write_header <- function(outfile, env) {
header <- c('Time', 'AvgOrIndx', 'ID', 'ParentID:Birthday', 'c\'', 'd\'', 'i\'', 'im\'', 'a\'',
'k\'', 'E\'', 'N', 'Nmax\'', 'M', 'Ha', 'Him', 'Hi', 'Hd', 'Hb', 'type', 'mut_den',
paste("PosDriver:", onco$name, sep=""), paste("PosPasngr:", onco$name, sep=""), 'Clone number', 'Passengers Clone number', 'Mix Clone number')
write(header, outfile, append=FALSE, ncolumn=length(header), sep="\t")
}
write_cellout <- function(outfile, env, cells, isFirst) {
data <- c(env$T, 'avg', '-', '-', env$c, env$d, env$i, env$im, env$a, env$k, env$E, env$N,
env$Nmax, env$M, env$Ha, env$Him, env$Hi, env$Hd, env$Hb, env$type, env$mutden,
env$posdriver, env$pospasngr, '-', '-', '-')
write(data, outfile, append=TRUE, ncolumn=length(data), sep="\t")
if (length(cells) > 0 & isFirst) {
for (i in 1:length(cells)) {
cell1 = cells[[i]]
vc <- 0
for (j in 1:length(cell1$gene)) {vc<- vc + 2^(length(cell1$gene)-j) * cell1$gene[j]}
pasvc <- 0
for (j in 1:length(cell1$pasgene)) {pasvc<- pasvc + 2^(length(cell1$pasgene)-j) * cell1$pasgene[j]}
mixvc <- 0
for (j in 1:length(cell1$pasgene)) {mixvc<- mixvc + 2 * 4^(length(cell1$pasgene)-j) * cell1$pasgene[j] + 4^(length(cell1$gene)-j) * cell1$gene[j]}
data <- c(env$T, i, cell1$id, paste(cell1$parent,cell1$birthday,sep = ":"), cell1$c, cell1$d, cell1$i, cell1$im, cell1$a,
cell1$k, cell1$E, env$N, cell1$Nmax, env$M,
cell1$Ha, cell1$Him, cell1$Hi, cell1$Hd, cell1$Hb, ifelse(cell1$invasion,1,0), cell1$mutden,
cell1$posdriver, cell1$pospasngr, vc, pasvc, mixvc)
write(data, outfile, append=TRUE, ncolumn=length(data), sep="\t")
}
}
}
# initial cell setting
init_cells <- function(cellfile, cell1) {
mpos <- regexpr("\\.", cellfile)[1]
if (mpos != -1) {
name <- substr(cellfile, 1, mpos - 1)
} else {
name <- cellfile
}
cells = NULL
n <- as.numeric(name)
if (!is.na(n) && is.numeric(n)) {
factor = n / sum(cell1$m*onco$cds)
f2 = 1.0
while (TRUE) {
if (sum(floor(cell1$m*onco$cds*factor*f2 + 0.5)) >= n) {
break
}
f2 = f2 + 0.1
}
nums = floor(cell1$m*onco$cds*factor*f2 + 0.5)
cells = NULL
for (i in 1:n) {
cells = c(cells, cell_copy(cell1))
}
pos = 0
for (i in 1:length(nums)) {
if (nums[i] > 0) {
for (j in 1:nums[i]) {
if (pos + j <= n) {
cells[[pos + j]]$gene[i] = 1
}
}
pos = pos + nums[i]
}
}
} else {
data = read.table(cellfile, sep="\t")
n <- nrow(data)
for (i in 1:n) {
cell2 = cell_copy(cell1)
p <- match(onco$name, str_trim(strsplit(as.character(data[i,2]),",")[[1]]))
cell2$gene[seq(1,length(onco$name))[!is.na(p)]] = 1
cells = c(cells, cell2)
}
}
for (i in 1:n) {
cells[[i]]$id = i
cells[[i]]$parent = 0
cells[[i]]$birthday = 0
cells[[i]]$posdriver = ifelse(cells[[i]]$gene == 1,
paste(ceiling(runif(onco$len)*onco$cds),"0",sep = ":"),
cells[[i]]$posdriver)
cells[[i]]$calcMutden()
cells[[i]]$calcApoptosis()
}
env$last_id = n
return(as.list(cells))
}
# Genetic recombination
read_w <- function(file) {
if (!is.null(file) & !is.na(file)) {
data <- read.table(file, sep="\t")
w <- NULL
r = 1
start = 1
while (TRUE) {
window = ceiling(runif(1)*ncol(data))
if (start + window > ncol(data)) {
window = ncol(data) - start
}
w = c(w, data[r,start:(start+window)])
if (start+window == ncol(data)) {
break
}
start = start + window
r = ifelse(r==1,2,1)
}
hall$setW(w)
}
}
model <- function(genefile, cellfile, geneoutfile, celloutfile, logoutfile, E0, F0, m, uo, us, s, k, censore_n, censore_t) {
write_log(genefile, cellfile, geneoutfile, celloutfile, logoutfile, E0, F0, m, uo, us, s, k, censore_n, censore_t)   # write input parameters
onco = oncogene$new()        # make the vector onco about the hallmarks
onco$read(genefile)          # read the input info to the onco from genefile - 'gene_cds2.txt'
hall = hallmark$new()        # make a vector hall with hallmarks parameters
hall$read(genefile, onco$name)     # read from the genefile - 'gene_cds2.txt'
env = environ$new(F0)               # new vector for average values of cells
assign("env", env, env=.GlobalEnv)
assign("onco", onco, env=.GlobalEnv)
assign("hall", hall, env=.GlobalEnv)
assign("uo", uo, env=.GlobalEnv)
assign("us", us, env=.GlobalEnv)
cell1 = cell$new(gene_size=length(onco$cds),
m=m, s=s, k=k, E=E0)              # cell1  -  empty object of cell
cells = init_cells(cellfile, cell1)                # cells - cells with hallmarks from cellfile - cellinit.txt - initial cells
write_geneout(geneoutfile, hall)                   # write the geneout.txt file with initial hallmarks
write_header(celloutfile, env)                     #
lapply(cells,update_Hallmarks)                     # to calculate the Hallmarks and probabilities for initial cells
hall$updateEnviron(env, cells)                     # make averaging for cells and first step (T=T+1)
isFirst = TRUE
write_cellout(celloutfile, env, cells, isFirst)     #  write initial cells
while(length(cells) > 0 && censore_n > (env$N + env$M) && env$T < censore_t) {
ret = unlist(lapply(cells, trial))               # The mark of cells during application of the trial !!! WOTHOUT changing of cells
cells = c(cells, lapply(cells[ret==2], cell_copy))  # add cells after division (ret=2)
ret=c(ret,ret[ret==2])
lapply(cells[ret==2], trial_mutagenesis)         # apply the mutagenesis trial to the parent and child cells independently
cells = c(cells[ret>=1])                         # delete cells with ret=0
ret=c(ret[ret>=1])
lapply(cells,update_Hallmarks)                  # to calculate the Hallmarks and probabilities for initial cells
hall$updateEnviron(env, cells)                   #  make averaging for cells, Hallmarks etc and increase step (T=T+1)
write_cellout(celloutfile, env, cells, isFirst)
}
}
# Exchange the 3rd and 4th coloumns in the genefile
changeCol <- function(genefile) {
exchange = read.table(file =genefile, header = FALSE)
Vec1 = exchange$V1
Vec2 = exchange$V2
Vec3 = exchange$V3
Vec4 = exchange$V4
Vec5 = exchange$V5
exch_new = data.frame(Vec1,Vec2,Vec4,Vec3,Vec5)
genefileNew = substr(genefile,1,4)
write.table(exch_new, file = genefileNew, append = FALSE, quote = TRUE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = FALSE, qmethod = c("escape", "double"),
fileEncoding = "")
return(genefileNew)
}
library(stringr)
genefile <- 'gene_cds2.txt'     #args[1]                # gene file - "gene_cds2.txt"
cellfile <- 'cellinit.txt'      #args[2]                # initial Cells - "cellinit.txt"
geneoutfile <- 'geneout.txt'    #args[3]             # Gene Out file with Hallmarks - "gene out"
celloutfile <- 'cellout.txt'    #args[4]             # output information of simulation - "cellout.txt"
logoutfile <-  'log.txt'        #args[5]              # log file to save the input information of simulation - "log.txt"
E0 <- 1E-3                     #as.numeric(args[6])          # (1E-1, 1E-2, 1E-3, 1E-4, 1E-5)
F0 <- 1E1                      #as.numeric(args[7])          # (10^1, 10^2, 10^3, 10^6, 10^9, 10^12)
m <-  1E-7                       #as.numeric(args[8])           # mutation probability (1*10e-11, 5*10e-11, 1*10e-10, 5*10e-10, 1*10e-9, 5*10e-9, 1*10e-8, 5*10e-8)
uo <- 0.5                       #as.numeric(args[9])          # oncogene mutation probability
us <- 0.5                       #as.numeric(args[10])         # suppressor mutation probability
s <-  10                        #as.numeric(args[11])          # (10, 100)
k <-  0.5                       #as.numeric(args[12])          # Environmental death probability
censore_n <- 20000               #as.numeric(args[14])  # Max cell number where the program forcibly stops
censore_t <- 45                 #as.numeric(args[15])  # Max time where the program forcibly stops
y <- data.frame(1:15000)
# The function is in the Analize.R file
analize_data(celloutfile)
analize_data <- function(celloutfile) {
# Analising of results:
data_out <- read.csv(celloutfile, sep="\t")
data_out[is.na(data_out)] <- ""
# make a readible names
names(data_out)[5] <-  "c"
names(data_out)[6] <-  "d"
names(data_out)[7] <-  "i"
names(data_out)[8] <-  "im"
names(data_out)[9] <-  "a"
names(data_out)[10] <- "k"
names(data_out)[11] <- "E"
names(data_out)[13] <- "Nmax"
names(data_out)
# average data
data_avg <<- data_out[which(data_out$AvgOrIndx == "avg"),]
# data without averaging - flow data
data_flow <<- data_out[which(!data_out$AvgOrIndx == "avg"),]
# the data of the last time step
time_max <<- max(data_flow$Time)
data_last <<- data_flow[which(data_flow$Time == time_max),]
# let draw graphics
# Numbers of Metastasis and normal cells
g_range_y <- range(0, data_avg$N,data_flow$M)
g_range_x <- range(min(data_avg$Time),max(data_flow$Time))
plot(data_avg$Time,data_avg$M,type = "l",cex.lab=1.4,lwd=2,xlab = "Generation number",
ylab = "Number of cells",ylim=g_range_y,xlim = g_range_x,col = "red")
lines(data_avg$Time,data_avg$N,type = "l",col = "blue",lwd=2)
par(xpd=TRUE)
# g_range_x[1]/2+g_range_x[2]/2.5, 1.2*g_range_y[2]
legend(g_range_x[1], 1.2*g_range_y[2], c("Normal","Metastasis"),
lwd=2,cex=1,col=c("blue","red"), lty = 1:1,horiz = TRUE)
rl <-  readline(prompt="This is a plot for Normal and Metastasis Numbers of cells - Press Enter  ")
# Average values of probabilities
g_range_y <- range(0, data_avg[6:10])
g_range_x <- range(min(data_avg$Time),max(data_flow$Time))
plot(data_avg$Time,data_avg$d,type = "l", ylim=g_range_y,xlim = g_range_x,cex.lab=1.4,
xlab = "Generation number",ylab = "The average probabilities",col = "red",lwd = 2)
lines(data_avg$Time,data_avg$i,type = "l",col = "blue",lwd = 2)
lines(data_avg$Time,data_avg$im,type = "l",col = "green",lwd = 2)
lines(data_avg$Time,data_avg$a,type = "l",col = "orange",lwd = 2)
lines(data_avg$Time,data_avg$k,type = "l",col = "black",lwd = 2)
par(xpd=TRUE)
legend(g_range_x[1], 1.2*g_range_y[2], c("d","i","im","a","k"), cex=1,col=c("red","blue","green","orange","black"), lty = 1:1,lwd = 2,horiz = TRUE)
rl <-  readline(prompt="This is a plot for Average values of probabilities - Press Enter  ")
# The averaged values of Hallmarks
g_range_y <- range(0, data_avg[15:19])
g_range_x <- range(min(data_avg$Time),max(data_flow$Time))
plot(data_avg$Time,data_avg$Hd,type = "l", ylim=g_range_y,xlim = g_range_x,cex.lab=1.4,
xlab = "Generation number",ylab = "The averaged Hallmarks values",col = "red",lwd = 2)
lines(data_avg$Time,data_avg$Hi,type = "l",col = "blue",lwd = 2)
lines(data_avg$Time,data_avg$Him,type = "l",col = "green",lwd = 2)
lines(data_avg$Time,data_avg$Ha,type = "l",col = "orange",lwd = 2)
lines(data_avg$Time,data_avg$Hb,type = "l",col = "black",lwd = 2)
par(xpd=TRUE)
legend(g_range_x[1], 1.2*g_range_y[2], c("Hd","Hi","Him","Ha","Hb"), cex=1,col=c("red","blue","green","orange","black"), lty = 1:1,lwd = 2,horiz = TRUE)
rl <-  readline(prompt="This is a plot for Average values of Hallmarks - Press Enter  ")
rl <-  readline(prompt="This is function to save the order of gene dysfunction to the file `Order_of_dysfunction.txt`  - Press Enter to save and view")
# The order of gene dysfunction
order_dysfunction <<- data.frame(data_last[,21:(21+length(onco$name))],stringsAsFactors = FALSE)
names(order_dysfunction) <<- c("ID",onco$name)
order_dysfunction[,1] <<- data_last$ID
for (i in 1:(length(onco$name)+1)) {
order_dysfunction[,i] <<- as.character(order_dysfunction[,i])
}
#str(order_dysfunction)
order_dysfunction$ID <<- as.character(order_dysfunction$ID)
#str(order_dysfunction)
# substr(x, regexpr(":",x)+1, ifelse(isTRUE(grep(",",x)>0),(regexpr(",",x)-1),nchar(x)))
for (k in 1:length(order_dysfunction[,1])) {
for (i in 2:(length(onco$name)+1)) {
x<- order_dysfunction[k,i]
order_dysfunction[k,i] <<- substr(x, regexpr(":",x)+1, ifelse(isTRUE(grep(",",x)>0),(regexpr(",",x)-1),nchar(x)))
}
}
for (i in 1:length(onco$name)+1) {
order_dysfunction[,i] <<- as.integer(order_dysfunction[,i])
}
outfile <- 'Order_of_dysfunction.txt'
header <- c('Order of gene dysfunction: from first to last', 'Frequency or number of cells with same order')
write(header, outfile, append=FALSE, ncolumn=length(header), sep="\t")
#for (i in 1:length(order_dysfunction[,1])) {
#  data <- c(order_dysfunction$ID[i],names(sort(order_dysfunction[i,2:(length(onco$name)+1)])))
#  write(data, outfile, append=TRUE, ncolumn=length(data), sep="\t")
#    }
#    write_order_of_dysfunction('Order_of_dysfunction.txt', env, cells, isFirst)
x <- array("",dim = length(order_dysfunction[,1]))
for (i in 1:length(order_dysfunction[,1])) {
data <- c(names(sort(order_dysfunction[i,2:(length(onco$name)+1)])))
x[i] <- paste(data,collapse = " ")
}
print("The order of gene dysfunction for each cell in the file")
# find the unique orders of genes dysfunction
uniq_order <<- table(x)
uniq_order <<- sort(uniq_order,decreasing = TRUE)
print("Unique of order of genes dysfunction and it's frequency:")
for (i in 1:length(uniq_order)) {
print(c(names(uniq_order)[i],uniq_order[[i]]))
data <- c(names(uniq_order)[i],uniq_order[[i]])
write(data, outfile, append=TRUE, ncolumn=length(data), sep="\t")
}
}  # \ analize_data <- function {
ineq <- function(x, parameter = NULL, type=c("Gini", "RS", "Atkinson", "Theil",
"Kolm", "var", "square.var", "entropy"), na.rm = TRUE)
{
switch(match.arg(type),
Gini = Gini(x, na.rm = na.rm),
RS = RS(x, na.rm = na.rm),
Atkinson = Atkinson(x, parameter = parameter, na.rm = na.rm),
Theil = Theil(x, parameter = parameter, na.rm = na.rm),
Kolm = Kolm(x, parameter = parameter, na.rm = na.rm),
var = var.coeff(x, na.rm = na.rm),
square.var = var.coeff(x, square=TRUE, na.rm = na.rm),
entropy = entropy(x, parameter = parameter, na.rm = na.rm))
}
Gini <- function(x, corr = FALSE, na.rm = TRUE)
{
if(!na.rm && any(is.na(x))) return(NA_real_)
x <- as.numeric(na.omit(x))
n <- length(x)
x <- sort(x)
G <- sum(x * 1L:n)
G <- 2 * G/sum(x) - (n + 1L)
if (corr) G/(n - 1L) else G/n
}
y <- data.frame(1:1000)
y[1:3000,2] <- "GD"
y <- data.frame(1:1000)
y[301:600,2] <- "GA1"
y[601:900,2] <- "GB1"
y[901:100,2] <- "GI"
write.table(y,file = "cellinit.txt",sep = "\t", row.names = FALSE,col.names = FALSE)
model(genefile, cellfile, geneoutfile, celloutfile, logoutfile, E0, F0, m, uo, us, s, k, censore_n, censore_t)
# The function is in the Analize.R file
analize_data(celloutfile)
clones <- matrix(nrow = length(data_flow$Time), ncol = 4)
clones[,1] <- as.integer(as.character(data_flow$Time))
clones[,2] <- as.integer(as.character(data_flow$Clone.number))
clones[,3] <- as.integer(as.character(data_flow$Passengers.Clone.number))
clones[,4] <- as.integer(as.character(data_flow$Mix.Clone.number))
diversity <- matrix(nrow = time_max, ncol = 2)
for (i in 1:time_max) {
diversity[i,1] <- length(table(clones[which(clones[,1]==i),2]))
# diversity[i,2] <- diversity[i,1] / (data_avg$N[i] + data_avg$M[i])
diversity[i,2] <- length(table(clones[which(clones[,1]==i),4]))
}
g_range_y <- range(0, max(diversity[,2],diversity[,1]))
plot(1:time_max,diversity[,1],type = "l",col = "blue", lwd=2, ylim=g_range_y, xlab = "Time step", ylab = "Diversity or Number of clones") # number of clones - diversity
lines(1:time_max,diversity[,2],type = "l",col = "red", lwd=2)
legend(1, 1.2*g_range_y[2], c("Drivers","Drivers+Passengers"),
lwd=2,cex=1,col=c("blue","red"), lty = 1:1,horiz = TRUE)
g_range_y <- range(0, max(diversity[,2],diversity[,1]))
plot(1:time_max,diversity[,1],type = "l",col = "blue", lwd=2, ylim=g_range_y, xlab = "Time step", ylab = "Number of clones") # number of clones - diversity
lines(1:time_max,diversity[,2],type = "l",col = "red", lwd=2)
legend(1, 1.2*g_range_y[2], c("Drivers","Drivers+Passengers"),
lwd=2,cex=1,col=c("blue","red"), lty = 1:1,horiz = TRUE)
x <- table(clones[,2]) # names of all clones - "numeric" name of clones
total_clones <- length(names(x)) # number of all clones
evolution_clones <- data.frame(matrix(nrow = time_max, ncol = total_clones))
names(evolution_clones) <- names(x)
for (i in 1:time_max) {
y <-  table(clones[which(clones[,1]==i),2])
evolution_clones[i,match(names(y),names(evolution_clones))] <- y
}
evolution_clones[is.na(evolution_clones)] <- 0
library("RColorBrewer")
c <- rownames(brewer.pal.info)
c <- c[1:9]
jColor <- data.frame(number = 1:11,color = I(brewer.pal(11, name = c[1])))
for (j in 2:9) {
jColor1 <- data.frame(number = 1:11,color = I(brewer.pal(11, name = c[j])))
jColor  <- rbind(jColor,jColor1)
}
jColor$number <- 1:99
g_range_y <- range(0, max(evolution_clones))
plot(1:time_max,evolution_clones[,1],type = "l",col = jColor$color[1],cex.lab=1.4,lwd=3,xlab = "Generation number",
ylab = "Number of cells in each clone",ylim=g_range_y)
for (i in 2:total_clones) {
lines(1:time_max,evolution_clones[,i],col = jColor$color[i],lwd=3)
}
# the clones at the last time step
cl <- clones[which(clones[,1]==time_max),]
# Most popular clone
barplot(table(cl[,2]),xlab = "Name (unique number) of clone", ylab = "Number of clone's cells", space=0.7, col = "green")
# Most popular clone (Drivers and Passengers)
barplot(table(cl[,4]),xlab = "Name (unique number) of clone: Drivers + Passengers", ylab = "Number of clone's cells", space=0.7, col = "green")
ineq_clones <- matrix(0,nrow = time_max,ncol = 2)
# Inequality measure
for (k in 1:time_max) {
cl <- clones[which(clones[,1]==k),2]
ineq_clones[k,1] <- ineq(cl,type = "Gini")
cl2 <- clones[which(clones[,1]==k),4]
ineq_clones[k,2] <- ineq(cl2,type = "Gini")
}
g_range_y <- range(0, max(ineq_clones[,2], ineq_clones[,1]))
plot(1:time_max,ineq_clones[,1],type = "l", lwd=3, pch = 19, col = "blue", ylim = g_range_y, xlab = "Time step", ylab = "Inequlity coefficient")
lines(1:time_max,ineq_clones[,2],type = "l", lwd=3, pch = 19, col =  "red")
# g_range_x[1]/2+g_range_x[2]/2.5, 1.2*g_range_y[2]
legend(1, 1.2*g_range_y[2], c("Drivers","Drivers+Passengers"),
lwd=2,cex=1,col=c("blue","red"), lty = 1:1,horiz = TRUE)
setwd("~/Desktop")
g_range_x <- range(min(data[,1]),max(data[,1]))
setwd("~/Desktop/PATH_WAYS_7")
Struct_3_94 <- c(-0.35193254E+0001,   -0.35193136E+0001,   -0.35188119E+0001,   -0.35183444E+0001,   -0.35186672E+0001,   -0.49936536E+0001,   -0.49915951E+0001)
Struct_3_94 <- sum(Struct_3_94) / length(Struct_3_94)
Struct_3_8 <- c(-0.26937777E+0001,   -0.43757668E+0001,   -0.36024604E+0001,   -0.36018418E+0001,   -0.43741389E+0001,   -0.43758833E+0001,   -0.36030443E+0001)
Struct_3_8 <- sum(Struct_3_8) / length(Struct_3_8)
Struct_3_722 <- c(-0.27522539E+0001,   -0.42641142E+0001,   -0.27520963E+0001,   -0.27531912E+0001,   -0.42640257E+0001,   -0.42641902E+0001,   -0.50060063E+0001)
Struct_3_722 <- sum(Struct_3_722) / length(Struct_3_722)
Struct_3_707 <- c(-0.27010642E+0001,   -0.35103386E+0001,   -0.27015282E+0001,   -0.42627563E+0001,   -0.35092772E+0001,   -0.42615648E+0001,   -0.50081590E+0001)
Struct_3_707 <- sum(Struct_3_707) / length(Struct_3_707)
d <- read.table(file = "SADDLES_GOOD_STR.dat")
View(d)
d$V3 <- round(d$V3,4)
d$V4 <- round(d$V4,2)
d$V5 <- round(d$V5,2)
d$V6 <- round(d$V6,2)
sad <- matrix(nrow = length(d$V1),ncol = 8)
sad[,1] <- d$V3
sad[,2] <- d$V4
sad[,3] <- d$V5
sad[,4] <- d$V6
sad[,5] <- d$V7
sad[,6] <- d$V8
sad[,7] <- d$V9
sad[,8] <- d$V10
un_str <-  unique(sad)
un_11 <- un_str[which(un_str[,6] == 1),]
un_another <- un_str[which(un_str[,6] == 0),]
# Delete the duplication by hands!
un_str <- un_str[-9,]
yr <- c(-3.95,max(un_str[,1])+0.01)
xr <- c(0,length(un_str[,1])+1)
plot(1:length(un_11[,1]),un_11[,1],type = "p",col = "blue",ylim = yr,xlim = xr,xlab = "Saddle points", ylab = "Energy")
points((length(un_11[,1])+1):(length(un_11[,1])+length(un_another[,1])),un_another[,1],add = TRUE,type = "p",col = "blue",ylim = yr,xlim = xr,xlab = "Saddle points", ylab = "Energy")
points(8, Struct_3_94, pch = "1", add = TRUE,col = "red")
points(1, Struct_3_94, pch = "1", add = TRUE,col = "red")
points(15, Struct_3_94, pch = "1", add = TRUE,col = "red")
points(4, Struct_3_94, pch = "1", add = TRUE,col = "red")
points(12, Struct_3_94, pch = "1", add = TRUE,col = "red")
points(2.5, Struct_3_8, pch = "2", add = TRUE,col = "red")
points(6, Struct_3_8, pch = "2", add = TRUE,col = "red")
points(4, Struct_3_707, pch = "3", add = TRUE,col = "red")
points(7, Struct_3_722, pch = "4", add = TRUE,col = "red")
points(9, Struct_3_707, pch = "3", add = TRUE,col = "red")
points(12, Struct_3_722, pch = "4", add = TRUE,col = "red")
points(14, Struct_3_707, pch = "3", add = TRUE,col = "red")
good_str <- read.table(file = "SADDLES_GOOD_STR.dat")
rand_str <-  read.table(file = "SADDLES_RAND_WALKER.dat")
last_str <- read.table(file = "SADDLES_LAST_WALKER.dat")
gg <- matrix(nrow = length(good_str[,1]),ncol = 3)
rr <- matrix(nrow = length(rand_str[,1]),ncol = 3)
ll <- matrix(nrow = length(last_str[,1]),ncol = 3)
gg[,1] <- good_str$V8
gg[,2] <- good_str$V9
gg[,3] <- good_str$V10
rr[,1] <- rand_str$V8
rr[,2] <- rand_str$V9
rr[,3] <- rand_str$V10
ll[,1] <- last_str$V8
ll[,2] <- last_str$V9
ll[,3] <- last_str$V10
gg <- paste0(gg[,1],gg[,2],gg[,3])
rr <- paste0(rr[,1],rr[,2],rr[,3])
ll <- paste0(ll[,1],ll[,2],ll[,3])
diversity <- table(gg)
data <- matrix(0,ncol = 3,nrow = 8)
colnames(data)=c("GOOD","RAND","LAST")
rownames(data)=as.character(names(diversity))
data[,1] <- diversity
diversity_rr <- table(rr)
data[,2] <- diversity
diversity <- table(ll)
data[1:6,3] <- diversity
data <- t(data)
barplot(data, col=topo.colors(3) , border="white", font.axis=2, beside=T, xlab="Reactions", ylab = "Number of trials", font.lab=2)
legend("topright", legend=row.names(data),
col=topo.colors(3), fill=topo.colors(3),lty=1:2, horiz=TRUE, cex=0.8)
Struct_3_94 <- c(-0.35193254E+0001,   -0.35193136E+0001,   -0.35188119E+0001,   -0.35183444E+0001,   -0.35186672E+0001,   -0.49936536E+0001,   -0.49915951E+0001)
Struct_3_94 <- sum(Struct_3_94) / length(Struct_3_94)
Struct_3_8 <- c(-0.26937777E+0001,   -0.43757668E+0001,   -0.36024604E+0001,   -0.36018418E+0001,   -0.43741389E+0001,   -0.43758833E+0001,   -0.36030443E+0001)
Struct_3_8 <- sum(Struct_3_8) / length(Struct_3_8)
Struct_3_722 <- c(-0.27522539E+0001,   -0.42641142E+0001,   -0.27520963E+0001,   -0.27531912E+0001,   -0.42640257E+0001,   -0.42641902E+0001,   -0.50060063E+0001)
Struct_3_722 <- sum(Struct_3_722) / length(Struct_3_722)
Struct_3_707 <- c(-0.27010642E+0001,   -0.35103386E+0001,   -0.27015282E+0001,   -0.42627563E+0001,   -0.35092772E+0001,   -0.42615648E+0001,   -0.50081590E+0001)
Struct_3_707 <- sum(Struct_3_707) / length(Struct_3_707)
d <- read.table(file = "SADDLES_GOOD_STR.dat")
d$V3 <- round(d$V3,4)
d$V4 <- round(d$V4,2)
d$V5 <- round(d$V5,2)
d$V6 <- round(d$V6,2)
sad <- matrix(nrow = length(d$V1),ncol = 8)
sad[,1] <- d$V3
sad[,1] <- d$V3
sad[,2] <- d$V4
sad[,3] <- d$V5
sad[,4] <- d$V6
sad[,5] <- d$V7
sad[,6] <- d$V8
sad[,7] <- d$V9
sad[,8] <- d$V10
un_str <-  unique(sad)
View(sad)
un_11 <- un_str[which(un_str[,6] == 1),]
un_another <- un_str[which(un_str[,6] == 0),]
# Delete the duplication by hands!
un_str <- un_str[-9,]
yr <- c(-3.95,max(un_str[,1])+0.01)
xr <- c(0,length(un_str[,1])+1)
plot(1:length(un_11[,1]),un_11[,1],type = "p",col = "blue",ylim = yr,xlim = xr,xlab = "Saddle points", ylab = "Energy")
points((length(un_11[,1])+1):(length(un_11[,1])+length(un_another[,1])),un_another[,1],add = TRUE,type = "p",col = "blue",ylim = yr,xlim = xr,xlab = "Saddle points", ylab = "Energy")
points(8, Struct_3_94, pch = "1", add = TRUE,col = "red")
points(1, Struct_3_94, pch = "1", add = TRUE,col = "red")
points(15, Struct_3_94, pch = "1", add = TRUE,col = "red")
points(4, Struct_3_94, pch = "1", add = TRUE,col = "red")
points(12, Struct_3_94, pch = "1", add = TRUE,col = "red")
points(2.5, Struct_3_8, pch = "2", add = TRUE,col = "red")
points(6, Struct_3_8, pch = "2", add = TRUE,col = "red")
points(4, Struct_3_707, pch = "3", add = TRUE,col = "red")
points(7, Struct_3_722, pch = "4", add = TRUE,col = "red")
points(9, Struct_3_707, pch = "3", add = TRUE,col = "red")
points(12, Struct_3_722, pch = "4", add = TRUE,col = "red")
points(14, Struct_3_707, pch = "3", add = TRUE,col = "red")
